@page "/"
@inject HttpClient Http
@inject TwitchUser user  
@inject IJSRuntime js

@if (Clips == null)
{
	<p>Loading...</p>
}
else
{
<div class="grid-container">
	<Sidebar @ref="theSidebar" OnChannelFilter="FilterChannels" />
	<main>
		@if (Clips.Any())
		{
			foreach (var clip in Clips)
			{

				<CascadingValue Name="Width" Value="@width">
					<Clip ClipData="@clip"></Clip>
				</CascadingValue>

			}
		}
		else
		{
			<p>No clips available</p>
			<p><a href="#" @onclick="LoadAllClips">Reload all clips</a></p>
		}
	</main>
</div>
}

@code {

	protected Sidebar theSidebar;

	IEnumerable<Models.Clip> Clips = null;

	int width = 0;

	protected override async Task OnInitializedAsync()
	{

		width = await js.InvokeAsync<int>("window.Page.getWidth");

		await LoadAllClips();

		await base.OnInitializedAsync();

	}

	protected async Task LoadAllClips() {
		theSidebar?.ClearFilter();
		Clips = await Http.GetFromJsonAsync<IEnumerable<Models.Clip>>($"/api/GetClips?twitchuserid={user.TwitchId}");
	}

	protected async Task FilterChannels(string twitchUserId) {

		Clips = await Http.GetFromJsonAsync<IEnumerable<Models.Clip>>($"/api/GetClips?twitchuserid={user.TwitchId}&filter={twitchUserId}");

	}

}